{"metadata":{"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":308849,"sourceType":"datasetVersion","datasetId":129000}],"dockerImageVersionId":30616,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"![Doggos-101](https://i.ibb.co/n7zX33C/doggos-loggos-nb-txt.png)","metadata":{}},{"cell_type":"markdown","source":"## Imports","metadata":{}},{"cell_type":"code","source":"import os,sys\nimport cv2\nfrom tqdm import tqdm\nimport re\nimport random\n\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom tensorflow.keras.layers.experimental.preprocessing import Rescaling\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.utils import to_categorical, image_dataset_from_directory\n\n# inception_v3 import\nfrom tensorflow.keras.applications.inception_v3 import preprocess_input as preprocess_input_incv3, InceptionV3\nfrom tensorflow.keras.applications.efficientnet import EfficientNetB3\n\n#extra\nfrom tensorflow.keras.layers import Input","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:09.780970Z","iopub.execute_input":"2023-12-11T11:01:09.781367Z","iopub.status.idle":"2023-12-11T11:01:09.788958Z","shell.execute_reply.started":"2023-12-11T11:01:09.781337Z","shell.execute_reply":"2023-12-11T11:01:09.787898Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Try Models","metadata":{}},{"cell_type":"markdown","source":"## Load and preprocess data using image_dataset_from_directory for better performance","metadata":{}},{"cell_type":"code","source":"# Use this to see what directories you have:\n# for root, folders, filenames in os.walk('/kaggle/input'):\n#    print(root, folders)\n\n# path for kaggle train/test (data should be train/test or train/val/test splitted)\ntrain_dir = '/kaggle/input/cropped/cropped/train' # use paths to your data location\ntest_dir = '/kaggle/input/cropped/cropped/train' # use paths to your data location","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:09.791054Z","iopub.execute_input":"2023-12-11T11:01:09.791451Z","iopub.status.idle":"2023-12-11T11:01:09.803092Z","shell.execute_reply.started":"2023-12-11T11:01:09.791416Z","shell.execute_reply":"2023-12-11T11:01:09.802362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# load train\ntrain_ds = image_dataset_from_directory(\n    train_dir,\n    labels='inferred',\n    label_mode='categorical',\n    validation_split=0.2,\n    subset=\"training\",\n    seed=123,\n    image_size=(224, 224),\n    batch_size=32)\n\n# preprocess train\nprep_train_ds = train_ds.map(lambda x, y: (preprocess_input_incv3(x), y))","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:09.804126Z","iopub.execute_input":"2023-12-11T11:01:09.804407Z","iopub.status.idle":"2023-12-11T11:01:13.741278Z","shell.execute_reply.started":"2023-12-11T11:01:09.804382Z","shell.execute_reply":"2023-12-11T11:01:13.740354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# load val\nvalidation_ds = image_dataset_from_directory(\n    train_dir,\n    labels='inferred',\n    label_mode='categorical',\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=123,\n    image_size=(224, 224),\n    batch_size=32)\n\n# preprocess val\nprep_val_ds = validation_ds.map(lambda x, y: (preprocess_input_incv3(x), y))","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:13.742661Z","iopub.execute_input":"2023-12-11T11:01:13.743047Z","iopub.status.idle":"2023-12-11T11:01:14.577740Z","shell.execute_reply.started":"2023-12-11T11:01:13.743001Z","shell.execute_reply":"2023-12-11T11:01:14.576789Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# load test\ntest_ds = image_dataset_from_directory(\n    test_dir,\n    labels='inferred',\n    label_mode='categorical',\n    image_size=(224, 224),\n    batch_size=32)\n\n# preprocess test\nprep_test_ds = test_ds.map(lambda x, y: (preprocess_input_incv3(x), y))","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:14.580032Z","iopub.execute_input":"2023-12-11T11:01:14.580339Z","iopub.status.idle":"2023-12-11T11:01:15.458626Z","shell.execute_reply.started":"2023-12-11T11:01:14.580312Z","shell.execute_reply":"2023-12-11T11:01:15.457664Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Load and freeze your model","metadata":{}},{"cell_type":"code","source":"# specify the shape for the input layer\ninput_shape = train_ds.element_spec[0].shape[1:] #(224, 224, 3)\ninput_tensor = Input(shape=input_shape)","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:15.459798Z","iopub.execute_input":"2023-12-11T11:01:15.460066Z","iopub.status.idle":"2023-12-11T11:01:15.466004Z","shell.execute_reply.started":"2023-12-11T11:01:15.460041Z","shell.execute_reply":"2023-12-11T11:01:15.465070Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# inception is a base model\nbase_model = InceptionV3(input_tensor=input_tensor, weights='imagenet', include_top=False)\n# freeze the base model layers to prevent weights from being updated during training\nbase_model.trainable = False","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:15.467127Z","iopub.execute_input":"2023-12-11T11:01:15.467444Z","iopub.status.idle":"2023-12-11T11:01:17.974278Z","shell.execute_reply.started":"2023-12-11T11:01:15.467408Z","shell.execute_reply":"2023-12-11T11:01:17.973418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Combine base model with own dense layers","metadata":{}},{"cell_type":"code","source":"def model_init():\n    augmentation = Sequential([\n        layers.RandomFlip(\"horizontal\"),\n        layers.RandomZoom(0.1),\n        layers.RandomTranslation(0.2, 0.2),\n        layers.RandomRotation(0.1)\n    ])\n\n    model = Sequential([\n        layers.Input(shape = input_shape),\n        augmentation,\n        base_model,\n        layers.Flatten(),\n        layers.Dense(100, activation=\"relu\"),\n        layers.Dense(100, activation=\"relu\"),\n        layers.Dense(120, activation='softmax')\n    ])\n    return model","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:17.975434Z","iopub.execute_input":"2023-12-11T11:01:17.975730Z","iopub.status.idle":"2023-12-11T11:01:17.982120Z","shell.execute_reply.started":"2023-12-11T11:01:17.975702Z","shell.execute_reply":"2023-12-11T11:01:17.981154Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"inception_model = model_init()\ninception_model.summary()","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:17.983612Z","iopub.execute_input":"2023-12-11T11:01:17.983982Z","iopub.status.idle":"2023-12-11T11:01:19.314078Z","shell.execute_reply.started":"2023-12-11T11:01:17.983945Z","shell.execute_reply":"2023-12-11T11:01:19.312207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"opt = optimizers.Adam(learning_rate=1e-4)\n\ndef compile_model(model):\n    model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\n    return model","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:19.315397Z","iopub.execute_input":"2023-12-11T11:01:19.315699Z","iopub.status.idle":"2023-12-11T11:01:19.323128Z","shell.execute_reply.started":"2023-12-11T11:01:19.315671Z","shell.execute_reply":"2023-12-11T11:01:19.322021Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"inception_1 = compile_model(inception_model) # always call compile_model in the same cell as your model.fit\n\nMODEL = \"name\" # will be in the name of your .h5 file\n\nepochs = 20\n\nes = EarlyStopping(monitor='val_loss', \n                   mode='auto', \n                   patience=3, \n                   verbose=1, \n                   restore_best_weights=True)\n\nlr = ReduceLROnPlateau(monitor=\"val_loss\",\n                       factor=0.1,\n                       patience=2,\n                       verbose=1,\n                       min_lr=0)\n\nmcp = ModelCheckpoint(f\"{MODEL}.h5\",\n                      save_weights_only=True,\n                      monitor='val_accuracy',\n                      mode='max',\n                      verbose=0,\n                      save_best_only=True)\n\nhistory_1 = inception_1.fit(prep_train_ds, \n                        validation_data=prep_val_ds, \n                        epochs=epochs,\n                        callbacks=[es, lr, mcp],\n                        batch_size=32,\n                        verbose=1)","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:01:19.324496Z","iopub.execute_input":"2023-12-11T11:01:19.324810Z","iopub.status.idle":"2023-12-11T11:10:53.500206Z","shell.execute_reply.started":"2023-12-11T11:01:19.324782Z","shell.execute_reply":"2023-12-11T11:10:53.499413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# score model\nloss, accuracy_1 = inception_1.evaluate(prep_test_ds)\nprint(f\"Test loss: {loss:.4f}\")\nprint(f\"Test accuracy: {accuracy_1:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:10:53.505815Z","iopub.execute_input":"2023-12-11T11:10:53.506109Z","iopub.status.idle":"2023-12-11T11:11:34.500335Z","shell.execute_reply.started":"2023-12-11T11:10:53.506082Z","shell.execute_reply":"2023-12-11T11:11:34.499420Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_history(history, title='', axs=None, exp_name=\"\"):\n    if axs is not None:\n        ax1, ax2 = axs\n    else:\n        f, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n    \n    if len(exp_name) > 0 and exp_name[0] != '_':\n        exp_name = '_' + exp_name\n    ax1.plot(history.history['loss'], label='train' + exp_name)\n    ax1.plot(history.history['val_loss'], label='val' + exp_name)\n    ax1.set_title('loss')\n    ax1.legend()\n\n    ax2.plot(history.history['accuracy'], label='train accuracy'  + exp_name)\n    ax2.plot(history.history['val_accuracy'], label='val accuracy'  + exp_name)\n    ax2.set_title('Accuracy')\n    ax2.legend()\n    return (ax1, ax2)","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:11:34.503267Z","iopub.execute_input":"2023-12-11T11:11:34.503578Z","iopub.status.idle":"2023-12-11T11:11:34.511461Z","shell.execute_reply.started":"2023-12-11T11:11:34.503550Z","shell.execute_reply":"2023-12-11T11:11:34.510541Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_history(history_1)","metadata":{"execution":{"iopub.status.busy":"2023-12-11T11:11:34.512676Z","iopub.execute_input":"2023-12-11T11:11:34.512990Z","iopub.status.idle":"2023-12-11T11:11:35.210051Z","shell.execute_reply.started":"2023-12-11T11:11:34.512953Z","shell.execute_reply":"2023-12-11T11:11:35.209148Z"},"trusted":true},"execution_count":null,"outputs":[]}]}